https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/structural.html

https://www.sohu.com/a/287052635_100028126

https://blog.csdn.net/bingxuefenggu/article/details/80958747

http://liangjf.top/2020/04/26/128.go-micro%E6%8F%92%E4%BB%B6%E5%8C%96/

最常用的设计模式：
https://www.jianshu.com/p/bdf65e4afbb0
https://www.cnblogs.com/newsouls/archive/2011/07/28/DesignTemplage.html

创建型： 单例模式(Singleton)  工厂模式(Factory)   抽象工厂模式(Abstract Factory)  建造者模式(Builder)
                          简单工厂模式
结构型： 外观模式(Facade)  代理模式(Proxy)    适配器模式(Adapter)   组合模式
       装饰器模式(Decorator)     桥接模式

行为型： 观察者模式(Observer)  迭代器模式   命令模式(Command)   策略模式(Strategy)
       模板模式(Template)  职责链模式   状态模式

那为什么我们需要学习设计模式呢？就跟我们看别人的代码来学习一样，是为了学习里面的精髓。
如何对修改封闭，对扩展开放。我们学东西，重要的是学idea，次要的是学technique。
学设计模式，是为了学习如何合理的组织我们的代码，如何解耦，如何真正的达到对修改封闭对扩展开放的效果，知道设计模式有好的一面也有不好的一面，
当然总的来说设计模式好的一面比较大。

设计模式要是真的学会了，你们会发现在写代码的时候，脑子里根本没有什么设计模式，你都已经融会贯通了。
代码写完了一看，这里有模式，那里也有模式。这就如同我们讲话不会去考虑语法，但是说出来大部分的话都是符合语法要求的。
这也如同我们写程序的时候不会总是去想程序的语法的问题，我们自然而然写出来的东西就是可以编译的。道理都是一样的。

合理的利用设计模式: 扩展点。
扩展点不是天生就有的，而是设计出来的。
设计软件的架构的时候，也要同时设计一下哪些地方以后可以改，哪些地方以后不能改。

要怎样才能学会设计模式呢?
就是创造条件去使用设计模式。很多人总是觉得，要通过简单的程序和例子来学设计模式。这是不对的。
设计模式就是因为情况复杂了所以才会出现的，所以我们只能通过复杂的程序来学习设计模式。
你不管看别人的程序也好，自己写程序练习也好，那必须要复杂，复杂到你不用设计模式就做不下去，这才能起到学习设计模式的作用。


